Example 1 :

#include <iostream>
#include <string>
#include <stdexcept>

// Base class
class File {
public:
    virtual void readData() = 0; // Pure virtual function
    virtual ~File() {} // Virtual destructor
};

// Derived class for text files
class TextFile : public File {
public:
    void readData() override {
        std::cout << "Reading data from a text file." << std::endl;
        // Specific reading procedure for text files
        // For demonstration, let's simulate an error
        throw std::runtime_error("Error reading text file.");
    }
};

// Derived class for image files
class ImageFile : public File {
public:
    void readData() override {
        std::cout << "Reading data from an image file." << std::endl;
        // Specific reading procedure for image files
        // For demonstration, let's assume no error
    }
};

// Function to process file reading
void processFile(File* file) {
    try {
        file->readData();
    } catch (const std::runtime_error& e) {
        std::cout << "Runtime error: " << e.what() << std::endl;
        // Handle the error based on the actual derived class type
        if (dynamic_cast<TextFile*>(file)) {
            std::cout << "Handling error specific to text files." << std::endl;
        } else if (dynamic_cast<ImageFile*>(file)) {
            std::cout << "Handling error specific to image files." << std::endl;
        }
    }
}

int main() {
    TextFile textFile;
    ImageFile imageFile;

    std::cout << "Processing TextFile:" << std::endl;
    processFile(&textFile);

    std::cout << "\nProcessing ImageFile:" << std::endl;
    processFile(&imageFile);

    return 0;
}

Example 2 :
#include <iostream>
#include <memory>
class Chair {
public:
    virtual void sitOn() = 0; // Pure virtual function
    virtual ~Chair() {}
};
class ModernChair : public Chair {
public:
    void sitOn() override {
        std::cout << "Sitting on a modern chair." << std::endl;
    }
};
class ClassicChair : public Chair {
public:
    void sitOn() override {
        std::cout << "Sitting on a classic chair." << std::endl;
    }
};
class FurnitureFactory {
public:
    virtual Chair* createChair() = 0; // Pure virtual function
    virtual ~FurnitureFactory() {}
};
class ModernFurnitureFactory : public FurnitureFactory {
public:
    Chair* createChair() override {
        return new ModernChair();
    }
};
class ClassicFurnitureFactory : public FurnitureFactory {
public:
    Chair* createChair() override {
        return new ClassicChair();
    }
};
void createFurniture(FurnitureFactory* factory) {
    std::unique_ptr<Chair> chair(factory->createChair());
    chair->sitOn();
}
int main() {
    std::unique_ptr<FurnitureFactory> modernFactory(new ModernFurnitureFactory());
    std::cout << "Creating Modern Furniture:" << std::endl;
    createFurniture(modernFactory.get());
    std::unique_ptr<FurnitureFactory> classicFactory(new ClassicFurnitureFactory());
    std::cout << "\nCreating Classic Furniture:" << std::endl;
    createFurniture(classicFactory.get());
    return 0;
}

Example 3 :

#include <iostream>
#include <vector>
#include <string>
struct Passenger {
    std::string name;
    std::string passportNumber;
};
struct Flight {
    std::string flightNumber;
    std::string departureAirport;
    std::string arrivalAirport;
    std::string departureDateTime; 
    std::string arrivalDateTime;   
    int availableSeats;
    float pricePerSeat;
    std::vector<Passenger> passengers;
    Flight(std::string num, std::string dep, std::string arr,
           std::string depTime, std::string arrTime, int seats, float price)
        : flightNumber(num), departureAirport(dep), arrivalAirport(arr),
          departureDateTime(depTime), arrivalDateTime(arrTime),
          availableSeats(seats), pricePerSeat(price) {}
    void displayFlightDetails() {
        std::cout << "Flight Number: " << flightNumber << std::endl;
        std::cout << "Departure Airport: " << departureAirport << std::endl;
        std::cout << "Arrival Airport: " << arrivalAirport << std::endl;
        std::cout << "Departure Date/Time: " << departureDateTime << std::endl;
        std::cout << "Arrival Date/Time: " << arrivalDateTime << std::endl;
        std::cout << "Available Seats: " << availableSeats << std::endl;
        std::cout << "Price per Seat: $" << pricePerSeat << std::endl;
    }
    void bookSeat(const Passenger& passenger) {
        if (availableSeats > 0) {
            passengers.push_back(passenger);
            availableSeats--;
            std::cout << "Seat booked successfully for passenger: " << passenger.name << std::endl;
        } else {
            std::cout << "Sorry, no more seats available on this flight." << std::endl;
        }
    }
    void displayPassengers() {
        if (passengers.empty()) {
            std::cout << "No passengers booked yet." << std::endl;
        } else {
            std::cout << "List of booked passengers:" << std::endl;
            for (const auto& passenger : passengers) {
                std::cout << "Name: " << passenger.name << ", Passport: " << passenger.passportNumber << std::endl;
            }
        }
    }
};
int main() {
    Flight flight1("ABC123", "JFK", "LAX", "2024-07-05 08:00", "2024-07-05 11:00", 100, 250.50);
    std::cout << "Flight Details:" << std::endl;
    flight1.displayFlightDetails();
    std::cout << std::endl;
    Passenger passenger1 {"John Doe", "AB123456"};
    Passenger passenger2 {"Jane Smith", "CD789012"};
    flight1.bookSeat(passenger1);
    flight1.bookSeat(passenger2);
    std::cout << std::endl;
    flight1.displayFlightDetails();
    std::cout << std::endl;
    flight1.displayPassengers();
    return 0;
}


Example 4 :

#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>
class Flight;
class Passenger;
class Passenger {
public:
    Passenger(const std::string& name) : name(name) {}

    void bookFlight(Flight* flight, int seats);
    void cancelBooking(Flight* flight, int seats);
    void displayBookedFlights() const;
private:
    std::string name;
    std::vector<std::pair<Flight*, int>> bookedFlights;
};
class Flight {
public:
    Flight(const std::string& origin, const std::string& destination, int totalSeats, const std::string& date)
        : origin(origin), destination(destination), totalSeats(totalSeats), date(date), availableSeats(totalSeats) {}
    const std::string& getOrigin() const { return origin; }
    const std::string& getDestination() const { return destination; }
    const std::string& getDate() const { return date; }
    int getAvailableSeats() const { return availableSeats; }
    void bookSeats(int seats);
    void cancelSeats(int seats);
private:
    std::string origin;
    std::string destination;
    int totalSeats;
    std::string date;
    int availableSeats;
};
void Passenger::bookFlight(Flight* flight, int seats) {
    if (seats <= 0) {
        throw std::invalid_argument("Number of seats must be positive.");
    }
    if (flight->getAvailableSeats() < seats) {
        std::cout << "Not enough seats available on the flight from "
                  << flight->getOrigin() << " to " << flight->getDestination() << "." << std::endl;
        return;
    }

    flight->bookSeats(seats);
    bookedFlights.emplace_back(flight, seats);
    std::cout << "Successfully booked " << seats << " seat(s) on the flight from "
              << flight->getOrigin() << " to " << flight->getDestination() << "." << std::endl;
}
void Passenger::cancelBooking(Flight* flight, int seats) {
    for (auto it = bookedFlights.begin(); it != bookedFlights.end(); ++it) {
        if (it->first == flight && it->second == seats) {
            flight->cancelSeats(seats);
            bookedFlights.erase(it);
            std::cout << "Successfully cancelled booking of " << seats << " seat(s) on the flight from "
                      << flight->getOrigin() << " to " << flight->getDestination() << "." << std::endl;
            return;
        }
    }
    std::cout << "Booking for " << seats << " seat(s) on the flight from "
              << flight->getOrigin() << " to " << flight->getDestination() << " not found." << std::endl;
}
void Passenger::displayBookedFlights() const {
    std::cout << "Booked flights for passenger " << name << ":" << std::endl;
    for (const auto& booking : bookedFlights) {
        std::cout << "- " << booking.second << " seat(s) on " << booking.first->getDate()
                  << " from " << booking.first->getOrigin() << " to " << booking.first->getDestination() << std::endl;
    }
}
void Flight::bookSeats(int seats) {
    if (seats <= 0) {
        throw std::invalid_argument("Number of seats must be positive.");
    }
    if (availableSeats < seats) {
        throw std::runtime_error("Not enough seats available on the flight.");
    }
    availableSeats -= seats;
}
void Flight::cancelSeats(int seats) {
    if (seats <= 0) {
        throw std::invalid_argument("Number of seats must be positive.");
    }
    if (seats > totalSeats - availableSeats) {
        throw std::runtime_error("Invalid number of seats to cancel.");
    }
    availableSeats += seats;
}
void addNewFlight(std::vector<Flight>& flights, const std::string& origin, const std::string& destination,
                  int totalSeats, const std::string& date) {
    flights.emplace_back(origin, destination, totalSeats, date);
    std::cout << "Flight added: " << origin << " to " << destination << " on " << date << std::endl;
}
void displayAvailableFlights(const std::vector<Flight>& flights, const std::string& origin,
                             const std::string& destination, const std::string& date) {
    std::cout << "Available flights from " << origin << " to " << destination << " on " << date << ":" << std::endl;
    for (const auto& flight : flights) {
        if (flight.getOrigin() == origin && flight.getDestination() == destination && flight.getDate() == date) {
            std::cout << "- " << flight.getDate() << ", " << flight.getAvailableSeats() << " seat(s) available" << std::endl;
        }
    }
}
int main() {
    std::vector<Flight> flights;
    flights.emplace_back("New York", "Los Angeles", 150, "2024-08-15");
    flights.emplace_back("Los Angeles", "New York", 120, "2024-08-16");
    flights.emplace_back("Chicago", "San Francisco", 100, "2024-08-17");
    Passenger passenger("John Doe");
    displayAvailableFlights(flights, "New York", "Los Angeles", "2024-08-15");
    try {
        passenger.bookFlight(&flights[0], 2); // Book 2 seats on the first flight
        passenger.bookFlight(&flights[1], 3); // Book 3 seats on the second flight
        passenger.bookFlight(&flights[2], 1); // Attempt to book 1 seat on the third flight (insufficient seats)
    } catch (const std::exception& e) {
        std::cout << "Exception occurred: " << e.what() << std::endl;
    }
    passenger.displayBookedFlights();
    passenger.cancelBooking(&flights[0], 1);
    passenger.displayBookedFlights();
    addNewFlight(flights, "San Francisco", "Chicago", 80, "2024-08-18");
    displayAvailableFlights(flights, "San Francisco", "Chicago", "2024-08-18");
    return 0;
}

Example 5 :

#include<iostream>
using namespace std;
int multiply(int a, int b);
int main()
{
    std::cout<<multiply (5,6)<<std::endl;
    std::cout<<[](int a, int b){return a*b; }(5,6)<<std::endl;
    auto f = [](int a, int b){ return a*b; };
    std::cout<<f(5, 6)<<std::endl;
}
int multiply(int a, int b)
{
    return a*b;
}

Example 6 :

#include<iostream>
using namespace std;
void lambda_value_capture()
{
    int value = 1;
    auto copy_value = [value]
    {
        return value;
    };
    {
    value = 100;
    auto stored_value = copy_value();
    std::cout<<"stored_value = "<<stored_value<<std::endl;
}
};
int main()
{
    lambda_value_capture();
    return 0;
}

Example 7 :

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
void assign(int& v)
{
    static int n=1; v= n++;
}
void print(int v)
{
    cout<<v<<" ";
}
int main()
{
    vector<int>vec(10);
    for_each(vec.begin(), vec.end(), print);
    cout<<endl;
      for_each(vec.begin(), vec.end(), assign);
        for_each(vec.begin(), vec.end(), print);
        return 0;
    
}

Example 8 :

#include <iostream>
#include <vector>
#include <algorithm>
std::vector<int> filter_even_odds(const std::vector<int>& numbers, bool is_even) {
    std::vector<int> filtered;
    std::for_each(numbers.begin(), numbers.end(), [&filtered, is_even](int num) {
        if ((num % 2 == 0) == is_even) {
            filtered.push_back(num);
        }
    });
    return filtered;
}
int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers = filter_even_odds(numbers, true);
    std::vector<int> odd_numbers = filter_even_odds(numbers, false);
    std::cout << "Even numbers: ";
    for (int num : even_numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    std::cout << "Odd numbers: ";
    for (int num : odd_numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    return 0;
}

Example 9 :

#include <iostream>
#include <vector>
#include <functional>
#include <numeric>
template <typename T>
T find_max(const std::vector<T>& objects, std::function<bool(const T& a, const T& b)> compare) {
    return std::accumulate(objects.begin(), objects.end(), objects[0],
                           [&compare](const T& max_obj, const T& current_obj) {
                               return compare(current_obj, max_obj) ? current_obj : max_obj;
                           });
}
int main() {
    struct Item {
        int id;
        double value;
    };
    std::vector<Item> items = {
        {1, 10.5},
        {2, 20.3},
        {3, 15.2},
        {4, 25.1}
    };
    auto compare = [](const Item& a, const Item& b) {
        return a.value > b.value;
    };
    Item max_item = find_max(items, compare);
    std::cout << "Item with the maximum value: ID = " << max_item.id << ", Value = " << max_item.value << std::endl;
    return 0;
}

Example 10 :

