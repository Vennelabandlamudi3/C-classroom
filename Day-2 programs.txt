Program1:
Pointers
Pointer Arithmetic:


#include <stdio.h>
int main() {
    int arr[5]={1,2,3,4,5};
    int *ptr = arr;
    for(int i=0;i<5;i++) 
	{
        printf("Element %d: %d\n",i,*(ptr + i));
    } 
    return 0;
}

Program 2:
Pointer to Pointer:

#include <stdio.h>
int main() {
    int var = 10;
    int *ptr1 = &var;
    int **ptr2 = &ptr1;
    printf("Value of var using single pointer: %d\n", *ptr1);
    printf("Value of var using pointer to pointer: %d\n", **ptr2);
    return 0;
}

Program 3:
Pointer Function Parameters:


#include <stdio.h>
void swap(int *a,int *b) {
    int temp =*a;
    *a =*b;
    *b =temp;
}

int main() {
    int x = 5;
    int y = 10;
    swap(&x,&y);
    printf("After swapping : x = %d, y = %d\n", x, y);
    return 0;
}

Program 4:
Dynamic Memory Allocation:

#include <stdio.h>
#include <stdlib.h>
int main() {
    int *arr = (int*)malloc(10 * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
        return 1; // Exit the program with an error code
    }
    for (int i = 0; i < 10; i++) {
        arr[i] = i + 1;
    }
    printf("Array values:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}

Program 5:

#include <stdio.h>
int add(int a, int b) {
    return a+b;
}
int main() {
    int (*funcPtr)(int, int) = &add;
    int x = 5;
    int y = 10;
    int result = funcPtr(x, y);
    printf("The result of adding %d and %d is: %d\n", x, y, result);
    return 0;
}

Program 6:

#include <stdio.h>
int factorial(int n) {
    if (n == 0) 
        return 1; // Base case: 0! is 1
    else 
        return n * factorial(n - 1); // Recursive case
    
}
int main() {
    int number = 5;
    int result = factorial(number);
    printf("The factorial of %d is: %d\n", number, result);
    return 0;
}

program 7:

#include <stdio.h>
#include <stdlib.h>
int* createArray(int size) {
    int *array = (int *)malloc(size * sizeof(int));
    if (array == NULL) {
        printf("Memory allocation failed\n");
        return NULL; // Return NULL if allocation failed
    }
    for (int i = 0; i < size; i++) {
        array[i] = i + 1;
    }
    return array;
}
int main() {
    int size = 10;
    int *array = createArray(size);
    if (array != NULL) {
        printf("Array values:\n");
        for (int i = 0; i < size; i++) {
            printf("%d ", array[i]);
        }
        printf("\n");
    }
    return 0;
}

Program 8:

#include <stdio.h>
int add(int a, int b);
int subtract(int a, int b);
int multiply(int a, int b);
int divide(int a, int b);
int main() {
    int (*operations[4])(int, int) = { add, subtract, multiply, divide };
    int x = 10, y = 5;
    printf("Addition: %d + %d = %d\n", x, y, operations[0](x, y));
    printf("Subtraction: %d - %d = %d\n", x, y, operations[1](x, y));
    printf("Multiplication: %d * %d = %d\n", x, y, operations[2](x, y));
    printf("Division: %d / %d = %d\n", x, y, operations[3](x, y));
    return 0;
}
int add(int a, int b) {
    return a + b;
}
int subtract(int a, int b) {
    return a - b;
}
int multiply(int a, int b) {
    return a * b;
}
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero\n");
        return 0; 
    }
}

Program 9:

#include <stdio.h>
void applyFunction(int arr[], int size, void (*func)(int *));
void doubleValue(int *x);

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);
    printf("Original array:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    applyFunction(arr, size, doubleValue);
    printf("Modified array (doubled values):\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
void applyFunction(int arr[], int size, void (*func)(int *)) {
    for (int i = 0; i < size; i++) {
        func(&arr[i]);
    }
}
void doubleValue(int *x) {
    *x *= 2;
}

Program 10:

#include <stdio.h>
void countFun();

int main() {
    countFun();
    countFun();
    countFun();
    return 0;
}
void countFun() {
    static int count = 0;
    count++;
    printf("Function has been called %d times.\n", count);
}

Program 11:
With structures, ItÂ may combine many data types under one name.

#include <stdio.h>
struct Point {
    int x;
    int y;
};
int main() {
    struct Point p1;
    p1.x = 5;
    p1.y = 10;
    printf("Coordinates of Point p1: (%d, %d)\n", p1.x, p1.y);
    return 0;
}
Program 12:
#include <stdio.h>

// Define the structure for Student
struct Student {
    char name[50];
    int age;
    float marks;
};

int main() {
    // Create an array of 3 students
    struct Student students[3] = {
        {"Alice", 20, 85.5},
        {"Bob", 21, 90.0},
        {"Charlie", 22, 78.2}
    };
    for (int i = 0; i < 3; i++) {
        printf("Student %d\n", i + 1);
        printf("Name: %s\n", students[i].name);
        printf("Age: %d\n", students[i].age);
        printf("Marks: %.2f\n", students[i].marks);
        printf("\n");
    }

    return 0;
}

Program 13:
#include <stdio.h>
#include <stdlib.h>

// Define the structure for Rectangle
struct Rectangle {
    float length;
    float width;
};

int main() {
    // Declare a pointer to a Rectangle structure
    struct Rectangle *rectPtr;

    // Dynamically allocate memory for the Rectangle structure
    rectPtr = (struct Rectangle *)malloc(sizeof(struct Rectangle));

    // Check if the memory has been allocated successfully
    if (rectPtr == NULL) {
        printf("Memory allocation failed\n");
        return 1; // Exit the program if memory allocation failed
    }

    // Initialize the members of the Rectangle structure
    rectPtr->length = 10.5;
    rectPtr->width = 5.25;

    // Print the values of the Rectangle structure
    printf("Rectangle Length: %.2f\n", rectPtr->length);
    printf("Rectangle Width: %.2f\n", rectPtr->width);

    // Free the dynamically allocated memory
    free(rectPtr);

    return 0;
}
Program 14:
#include <stdio.h>

// Define the structure for Date
struct Date {
    int day;
    int month;
    int year;
};

// Define the structure for Student
struct Student {
    char name[50];
    struct Date birthdate;
};

int main() {
    // Create and initialize a Student variable
    struct Student student = {
        "John Doe",
        {15, 7, 2002}  // birthdate: 15th July 2002
    };

    // Print the student's details
    printf("Student Name: %s\n", student.name);
    printf("Birthdate: %02d-%02d-%04d\n", student.birthdate.day, student.birthdate.month, student.birthdate.year);

    return 0;
}
Program 15:
#include <stdio.h>

// Define the structure for Date
struct Date {
    int day;
    int month;
    int year;
};

// Define the structure for Student
struct Student {
    char name[50];
    struct Date birthdate;
};

// Function to print Student details
void printStudent(struct Student s) {
    printf("Student Name: %s\n", s.name);
    printf("Birthdate: %02d-%02d-%04d\n", s.birthdate.day, s.birthdate.month, s.birthdate.year);
}

int main() {
    // Create and initialize a Student variable
    struct Student student = {
        "John Doe",
        {15, 7, 2002}  // birthdate: 15th July 2002
    };

    // Call the function to print student details
    printStudent(student);

    return 0;
}

